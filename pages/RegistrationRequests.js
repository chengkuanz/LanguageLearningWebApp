import { useEffect, useState } from "react";
import { collection, getDocs, doc, updateDoc, deleteDoc, getDoc } from "firebase/firestore";
import { db } from "../firebase";
import Head from 'next/head';
import Login from '../components/Login';
import { useAuth } from '../context/AuthContext';
import AccessDenied from "../components/AccessDenied";
import { Button } from "@mui/material";
import { AiOutlineCheck, AiOutlineClose } from "react-icons/ai";

export default function Home() {
  const { currentUser, isAdmin } = useAuth();
  const [registrationRequests, setRegistrationRequests] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      const reqCollection = collection(db, "registrationRequests");
      const requestSnapshot = await getDocs(reqCollection);
      setRegistrationRequests(requestSnapshot.docs.map(doc => ({ ...doc.data(), id: doc.id })));
    };

    fetchData();
  }, []);

  const handleAccept = async (req) => {
    try {
      const { courseId, userDocId } = req; // Use courseId instead of courseDocId
      if (!courseId) {
        console.error("Requested course ID is missing for request:", req);
        return;
      }

      const userRef = doc(db, 'users', userDocId);
      const reqRef = doc(db, 'registrationRequests', req.id);

      const userSnapshot = await getDoc(userRef);
      const userDoc = userSnapshot.data();

      if (!userDoc) {
        console.error("User document not found for userDocId:", userDocId);
        return;
      }

      const registeredCourses = userDoc.registeredCourses || [];
      const updatedCourses = new Set(registeredCourses);
      updatedCourses.add(courseId);

      await updateDoc(userRef, {
        registeredCourses: Array.from(updatedCourses)
      });

      await deleteDoc(reqRef);
      setRegistrationRequests(registrationRequests.filter(request => request.id !== req.id));
    } catch (error) {
      console.error("Error updating user document:", error);
      console.error("User document ID:", req.userDocId);
      console.error("Requested course ID:", req.courseId);
    }
  };

  const handleDeny = async (req) => {
    try {
      const reqRef = doc(db, 'registrationRequests', req.id);
      await deleteDoc(reqRef);
      setRegistrationRequests(registrationRequests.filter(request => request.id !== req.id));
    } catch (error) {
      console.error("Error denying registration request:", error);
    }
  };

  return (
      <>
        <Head>
          <title>Registration Requests</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        {!currentUser && <Login />}
        {currentUser && isAdmin &&
            <div className="container my-4">
              <h1 className="text-center mb-4">Registration Requests</h1>
              <div className="d-md-block d-lg-none">
                <h5>Legend</h5>
                <div className="d-flex justify-content-center">
                  <div className="d-flex align-items-center mx-2 text-success">
                    <AiOutlineCheck className="me-1" />
                    <span>Accept</span>
                  </div>
                  <div className="d-flex align-items-center mx-2 text-danger">
                    <AiOutlineClose className="me-1" />
                    <span>Deny</span>
                  </div>
                </div>
              </div>
              <table className="table table-striped table-bordered">
                <thead>
                <tr>
                  <th>Name</th>
                  <th>Student Number</th>
                  <th>Requested Course</th>
                  <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                {registrationRequests.map((req, index) => (
                    <tr key={index}>
                      <td>{req.firstName} {req.lastName}</td>
                      <td>{req.studentNumber}</td>
                      <td>{req.courseName}</td>
                      <td className="d-flex justify-content-between">
                        <Button
                            size="small"
                            className="btn-narrow me-1"
                            variant="contained"
                            color="success"
                            onClick={() => handleAccept(req)}
                        >
                          <span className="d-none d-lg-inline">Accept</span>
                          <AiOutlineCheck className="d-lg-none" />
                        </Button>
                        <Button
                            size="small"
                            className="btn-narrow"
                            variant="contained"
                            color="error"
                            onClick={() => handleDeny(req)}
                        >
                          <span className="d-none d-lg-inline">Deny</span>
                          <AiOutlineClose className="d-lg-none" />
                        </Button>
                      </td>
                    </tr>
                ))}
                </tbody>
              </table>
            </div>
        }
        {currentUser && !isAdmin && <AccessDenied />}
      </>
  );
}
